-- =====================================================
-- GARANTIR QUE TODAS AS ROLES PODEM MARCAR/DESMARCAR TAREFAS
-- =====================================================
-- Este script garante que QUALQUER usu√°rio autenticado, independente da role
-- (Gestor, Vendedor, Analista) possa marcar e desmarcar tarefas

-- Remover todas as pol√≠ticas existentes para recriar
DROP POLICY IF EXISTS "tasks_select_policy" ON public.card_tasks;
DROP POLICY IF EXISTS "tasks_insert_policy" ON public.card_tasks;
DROP POLICY IF EXISTS "tasks_update_policy" ON public.card_tasks;
DROP POLICY IF EXISTS "tasks_delete_policy" ON public.card_tasks;

-- =====================================================
-- 1. POLICY: SELECT (Visualizar tarefas)
-- =====================================================
-- QUALQUER usu√°rio autenticado pode visualizar tarefas
CREATE POLICY "tasks_select_policy"
ON public.card_tasks
FOR SELECT
USING (
  -- Qualquer usu√°rio autenticado pode ver tarefas
  auth.uid() IS NOT NULL
);

-- =====================================================
-- 2. POLICY: INSERT (Criar tarefas)
-- =====================================================
-- QUALQUER usu√°rio autenticado pode criar tarefas para qualquer pessoa
CREATE POLICY "tasks_insert_policy"
ON public.card_tasks
FOR INSERT
WITH CHECK (
  -- Verificar se o usu√°rio est√° autenticado
  auth.uid() IS NOT NULL
  AND
  -- Verificar se o usu√°rio tem acesso ao card
  EXISTS (
    SELECT 1 FROM public.kanban_cards fc
    WHERE fc.id = card_id
  )
  AND
  -- N√£o pode criar tarefa para si mesmo
  auth.uid() != assigned_to
);

-- =====================================================
-- 3. POLICY: UPDATE (Marcar/Desmarcar tarefas)
-- =====================================================
-- QUALQUER usu√°rio autenticado pode atualizar tarefas
-- Isso permite que qualquer role marque/desmarque tarefas
CREATE POLICY "tasks_update_policy"
ON public.card_tasks
FOR UPDATE
USING (
  -- Qualquer usu√°rio autenticado pode atualizar
  auth.uid() IS NOT NULL
)
WITH CHECK (
  -- Qualquer usu√°rio autenticado pode atualizar
  auth.uid() IS NOT NULL
);

-- =====================================================
-- 4. POLICY: DELETE (Deletar tarefas)
-- =====================================================
-- Apenas quem criou a tarefa pode delet√°-la (manter seguran√ßa)
CREATE POLICY "tasks_delete_policy"
ON public.card_tasks
FOR DELETE
USING (
  auth.uid() = created_by
);

-- =====================================================
-- VERIFICA√á√ÉO DAS POL√çTICAS
-- =====================================================

-- Verificar se as pol√≠ticas foram aplicadas corretamente
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'card_tasks'
ORDER BY policyname;

-- Log de confirma√ß√£o
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Pol√≠ticas aplicadas! Agora TODAS as roles podem:';
  RAISE NOTICE '   üëÅÔ∏è  VISUALIZAR tarefas (SELECT)';
  RAISE NOTICE '   ‚ûï CRIAR tarefas (INSERT)';
  RAISE NOTICE '   ‚úÖ MARCAR/DESMARCAR tarefas (UPDATE)';
  RAISE NOTICE '   üóëÔ∏è  DELETAR apenas suas pr√≥prias tarefas (DELETE)';
  RAISE NOTICE '';
  RAISE NOTICE 'üéØ ROLES COM PERMISS√ÉO TOTAL:';
  RAISE NOTICE '   - Gestor ‚úÖ';
  RAISE NOTICE '   - Vendedor ‚úÖ';
  RAISE NOTICE '   - Analista ‚úÖ';
END $$;
